#version 450
layout(local_size_x=4, local_size_y=4, local_size_z=4) in;

layout(std430, binding = 0) writeonly buffer Vertices{
	float d_dst[];
};
layout(binding = 1) uniform sampler3D in_sampler;
layout(std430, binding = 2) readonly buffer EdgeCompact{
	uint edge_compact[];
};
layout(std430, binding = 3) readonly buffer EdgeScan{
	uint edge_scan[];
};
layout(binding = 4) uniform MetaInfo{
	uvec3 dim;
	float isovalue;
};

uvec3 idx2pos(uint idx){
	uvec3 ret;
	ret.z = idx / (dim.x * dim.y);
	ret.y = (idx - ret.z * dim.x * dim.y) / dim.x;
	ret.x = idx % dim.x;
	return ret;
}

void main(){
	//uint thread_id = (gl_WorkGroupSize * gl_WorkGroupID + gl_LocalInvocationID).x;
	uvec3 pos = gl_WorkGroupSize * gl_WorkGroupID + gl_LocalInvocationID;
	uint thread_id = pos.x + pos.y *3* dim.x + pos.z * 3* dim.x * dim.y;
	if(thread_id > edge_scan[3*dim.x*dim.y*dim.z - 1]) return ;
	uint edge_id = edge_compact[thread_id * 3];
	uint dir = edge_id % 3;
	edge_id /= 3;
	uvec3 dvec = uvec3(dir == 0,dir==1, dir ==2);
	uvec3 p0 = idx2pos(edge_id);
	float v0 = texture( in_sampler, vec3(p0)/dim ).x;
	float v1 = texture(in_sampler, vec3(p0 + dvec)/dim).x;
	dir = max(max(dim.x, dim.y),dim.z);
	vec3 ip = vec3(p0) + vec3(dvec) * (isovalue - v0) /(v1 - v0);
	ip /= float(dir);
	ip -= 0.5;
	d_dst[thread_id*3] =  ip.x;
	d_dst[thread_id*3+1] = ip.y;
	d_dst[thread_id*3+2] = ip.z;
}