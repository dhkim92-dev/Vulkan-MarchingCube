#version 450
layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;
layout(std430, binding = 0) writeonly buffer Normals{
	float d_normals[];
};
layout(std430, binding = 1) buffer Vertices{
	float d_vertices[];
};
layout(binding = 2) readonly buffer EdgeScan{
	uint edge_scan[];
};
layout(binding = 3) uniform sampler3D d_volume;
layout(binding = 4) uniform Volume{
	uvec3 dim;
	float isovalue;
};

vec3 voxel_normal(uvec3 p){
	vec3 n;
	vec3 d = vec3(dim);
	n.x = texture(d_volume, vec3(p - uvec3(1,0,0))/d ).x - texture(d_volume, vec3( p + uvec3(1, 0, 0))/d ).x;
	n.y = texture(d_volume, vec3(p - uvec3(0,1,0))/d ).x - texture(d_volume, vec3( p + uvec3(0, 1, 0))/d ).x;
	n.z = texture(d_volume, vec3(p - uvec3(0,0,1))/d ).x - texture(d_volume, vec3( p + uvec3(0, 0, 1))/d ).x;
	float len = length(n);
	
	return (len==0.0)? vec3(0) : -normalize(n);
}

void main(){
	uint limit = edge_scan[dim.x*dim.y*dim.z*3-1];
	uvec3 thread_id = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID ;
	uint id = thread_id.x + thread_id.y * 3 * dim.x + thread_id.z * 3 * dim.x * dim.y;
	
	if(id >=limit) return ;

	uint max_val = max(max(dim.x, dim.y), dim.z);
	vec3 v = vec3( d_vertices[6*id], d_vertices[6*id + 1], d_vertices[6*id + 2] ) + 0.5;
	v*=max_val;
	vec3 base = trunc(v);
	uvec3 dir = uvec3(v.x!=base.x, v.y !=  base.y, v.z != base.z );
	
	uvec3 p0 = uvec3(base);
	uvec3 p1 = uvec3(base + dir);

	vec3 n1 = voxel_normal(p0);
	vec3 n2 = voxel_normal(p1);

	float v0 = texture(d_volume, vec3(base)/vec3(dim) ).x;
	float v1 = texture(d_volume, vec3(base + dir)/vec3(dim) ).x;
	float t = (isovalue - v0)/(v1-v0);

	vec3 n = normalize(mix(n1, n2, t));

	d_vertices[6*id + 3] = n.x;
	d_vertices[6*id + 4] = n.y;
	d_vertices[6*id + 5] = n.z;
}